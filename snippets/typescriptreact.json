{
    /*
      // Place your snippets for TypeScript React here. Each snippet is defined under a snippet name and has a prefix, body and 
      // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
      // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
      // same ids are connected.
      // Example:
      "Print to console": {
          "prefix": "log",
          "body": [
              "console.log('$1');",
              "$2"
          ],
          "description": "Log output to console"
      }
  */
    "Mithril ClassComponent": {
      "prefix": "component class",
      "body": [
        "import * as m from \"mithril\";",
        "",
        "interface I$1Attrs {",
        "  $2",
        "}",
        "",
        "export default class $1 implements m.ClassComponent<I$1Attrs> {",
        "  public view(v: m.CVnode<I$1Attrs>) {",
        "    return <div className=\"component--$1\">",
        "      $3",
        "    </div>;",
        "  }$4",
        "}",
        ""
      ],
      "description": "Create a Mithril ClassComponent"
    },
    "Mithril Animation Lifecycles": {
      "prefix": "lifecycles animation",
      "body": [
        "public oncreate(v: m.CVnodeDOM<I$1Attrs>) {",
        "  setTimeout(() => v.dom.classList.remove(\"before\"), requestAnimationFrame);",
        "}",
        "",
        "public onbeforeremove(v: m.CVnodeDOM<I$1Attrs>) {",
        "  v.dom.classList.add(\"after\");",
        "  const delay: number = this.getAnimationDuration(v.dom);",
        "  return new Promise((resolve) => setTimeout(resolve, delay));",
        "}",
        "",
        "public view(v: m.CVnode<I$1Attrs>) {",
        "  return <div className=\"component--$1 before\">",
        "    $2",
        "  </div>;",
        "}$3",
        "",
        "private getAnimationDuration(dom: Element): number {",
        "  return (",
        "    parseFloat(getComputedStyle(dom).transitionDelay) +",
        "    parseFloat(getComputedStyle(dom).transitionDuration)",
        "  ) * 1000;",
        "}",
        ""
      ],
      "description": "Create animation lifecycles for a Mithril ClassComponent"
    },
    "Mithril Animation ClassComponent": {
      "prefix": "component class animation",
      "body": [
        "import * as m from \"mithril\";",
        "",
        "interface I$1Attrs {",
        "  $2",
        "}",
        "",
        "export default class $1 implements m.ClassComponent<I$1Attrs> {",
        "  public oncreate(v: m.CVnodeDOM<I$1Attrs>) {",
        "    setTimeout(() => v.dom.classList.remove(\"before\"), requestAnimationFrame);",
        "  }",
        "",
        "  public onbeforeremove(v: m.CVnodeDOM<I$1Attrs>) {",
        "    v.dom.classList.add(\"after\");",
        "    const delay: number = this.getAnimationDuration(v.dom);",
        "    return new Promise((resolve) => setTimeout(resolve, delay));",
        "  }",
        "",
        "  public view(v: m.CVnode<I$1Attrs>) {",
        "    return <div className=\"component--$1 before\">",
        "      $3",
        "    </div>;",
        "  }$4",
        "",
        "  private getAnimationDuration(dom: Element): number {",
        "    return (",
        "      parseFloat(getComputedStyle(dom).transitionDelay) +",
        "      parseFloat(getComputedStyle(dom).transitionDuration)",
        "    ) * 1000;",
        "  }",
        "}",
        ""
      ],
      "description": "Create a Mithril ClassComponent"
    },
    "Export function": {
      "prefix": "export function",
      "body": [
        "export function $1($2): $3 {",
        "  $4",
        "}",
        "",
        "$5"
      ],
      "description": "Export function"
    },
    "Export lambda": {
      "prefix": "export lambda",
      "body": [
        "export const $1 = ($2): $3 => {",
        "  $4",
        "};",
        "",
        "$5"
      ],
      "description": "Export lambda function"
    }
  }